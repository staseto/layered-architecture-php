<?php
declare(strict_types = 1);
/**
 * @see  http://php.net/password_hash
 * @see  http://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php
 */
namespace Infrastructure\Service;

use Domain\Service\HashingService;
use Domain\ValueObject\Password;
use Domain\ValueObject\HashedPassword;

/**
 * Class BcryptHashingService
 *
 * Creates a new password hash using a strong one-way hashing algorithm
 *
 * The salt option has been deprecated as of PHP 7.0.0. It is now
 * preferred to simply use the salt that is generated by default.
 */
class BcryptHashingService implements HashingService
{
    /**
     * Algorithmic cost that should be used
     */
    const COST = 8;

    /**
     * @param  \Domain\ValueObject\Password          $password
     * @return \Domain\ValueObject\HashedPassword
     * @throws \RuntimeException
     */
    public function __invoke(Password $password): HashedPassword
    {
        if (!extension_loaded('mcrypt')) {
            throw new \RuntimeException("mcrypt extension is not loaded");
        }

        $hash = \password_hash( (string)$password, PASSWORD_BCRYPT, [self::COST]);

        return new HashedPassword($hash);
    }
}
